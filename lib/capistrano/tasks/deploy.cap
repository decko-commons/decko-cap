require "json"
require 'net/http'

namespace :deploy do
  def latest_commit
    url = fetch(:repo_url).clone
    url.sub! "github.com", "api.github.com/repos"
    url.sub! /\.git$/, "/commits/#{fetch(:branch)}"
    JSON.parse Net::HTTP.get(URI(url))
  end

  def commit_info
    commit = latest_commit
    ["with latest commit #{commit["sha"][0..5]}",
     "\"#{commit["commit"]["message"].split("\n").first}\"",
     "by #{commit.dig("commit", "author", "name")}"]
  rescue StandardError => e
    ["(failed to fetch info about latest commit from #{url})", e.message]
  end

  def warning_wrap *lines
    <<-EOF

    ************************** WARNING ***************************
#{ lines.flatten.map { |line| " " * 18 + line }.join "\n" }
    **************************************************************

    EOF
  end

  after :updated, :migrate do
    #because this creates the log and tmp files, it needs to be executed before the chown,
    # which in turn needs to happen before the restart.  not ideal.
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      within release_path do
        execute :rake, "decko:migrate"
        execute :rake, "decko:update_assets_symlink"
      end
    end
  end

  # TODO: update to use https://github.com/capistrano/file-permissions
  desc "Set www-data permissions on config.ru / log"
  after :updated, :deploy_chown do
    on roles(:app) do
      execute :sudo, "/opt/bin/deploy_chown", release_path
    end
  end

  desc "clear cache"
  after :published, :clear_cache do
    on roles(:app) do
      within release_path do
        execute :rake, "decko:reset_cache"
      end
    end
  end

  desc "regenerate all stuff create by machine cards (like css and javascript)"
  after :clear_cache, :reset_assets do
    # invoke "maintenance:enable"
    on roles(:app) do
      within release_path do
        execute :rake, "card:asset:reset"
      end
    end
    # invoke "maintenance:disable"
  end

  desc "stop old delayed job processes"
  before :starting, :stop_delayed_jobs do
    invoke "delayed_job:stop"
  end

  desc "start delayed job processes"
  after :published, :start_delayed_jobs do
    invoke "delayed_job:start"
  end

  # after :cleanup, :deploy_pt_stories do
  #   pt_config_file = File.expand_path("../../../../config/pivotaltracker.yml", __FILE__)
  #   next if fetch(:stage) != :staging || !File.exists?(pt_config_file)
  #
  #   require 'pivotal-tracker'
  #   tracker = YAML.load_file pt_config_file
  #   %i[token project_id].each do |n|
  #     raise "#{n} not set in pivotaltracker.yml" unless tracker[n]
  #   end
  #
  #   PivotalTracker::Client.token = tracker[:token]
  #   PivotalTracker::Client.use_ssl = true
  #
  #   require "pry"
  #   unpakt_project = PivotalTracker::Project.find(tracker[:project_id])
  #   stories =
  #     unpakt_project.stories.all(:state => "finished", :story_type => ['bug', 'feature'])
  #
  #   staging_deploy_tag = `git tag | grep staging | tail -n1`
  #
  #   stories.each do |story|
  #     next if story.labels&.include? "not merged"
  #     puts "Searching for #{story.id} in local git repo."
  #     search_result = `git log --grep #{story.id} #{staging_deploy_tag}`
  #     if search_result.length > 0
  #       puts "Found #{story.id}, marking as delivered."
  #       story.notes.create(:text => "Delivered by staging deploy script.")
  #       story.update({"current_state" => "delivered"})
  #     else
  #       puts "Could not find #{story.id} in git repo."
  #     end
  #   end
  # end

  # after :cleanup, :disable_maintenance_page do
  #  puts "waiting for machine stuff to regenerate"
  #  sleep 30
  #  invoke "maintenance:disable"
  # end
end
